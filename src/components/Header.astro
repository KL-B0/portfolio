---
import { MENU_ITEMS } from "@config";
import { Icon } from "astro-icon/components";
import { getRelativeLocaleUrl } from "astro:i18n";
import { useTranslation } from "@utils/i18n";

const t = useTranslation(Astro.currentLocale);

export interface Props {
  activeNav?: "nav.projects";
}

const { activeNav } = Astro.props;
---

<header>
  <a id="skip-to-content" href="#main-content">Skip to content</a>
  <div class="nav-container">
    <div class="top-nav-wrap">
      <a
        href={Astro.currentLocale == "en"
          ? getRelativeLocaleUrl("en", "/")
          : getRelativeLocaleUrl("it", "/")}
        class="logo whitespace-nowrap"
        aria-label="Navigate back to the homepage"
      >
        <Icon class="h-full w-full text-skin-accent" name="logo" />
      </a>

      <nav id="nav-menu">
        <button
          class="hamburger-menu focus-outline"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="menu-icon"
          >
            <line x1="4" x2="20" y1="12" y2="12" class="line"></line>
            <line x1="4" x2="20" y1="6" y2="6" class="line"></line>
            <line x1="4" x2="20" y1="18" y2="18" class="line"></line>
            <path d="M18 6 6 18" class="close"></path>
            <path d="m6 6 12 12" class="close"></path>
          </svg>
        </button>
        <!-- Navigation items -->
        <ul id="menu-items" class="hidden sm:flex">
          {
            MENU_ITEMS.map(item => (
              <li>
                {Astro.currentLocale == "en" ? (
                  <a
                    href={getRelativeLocaleUrl("en", item.url)}
                    class={activeNav === item.name ? "active" : ""}
                    aria-label={`Navigate to the ${item.name} section`}
                  >
                    {t(item.name)}
                  </a>
                ) : (
                  <a
                    href={getRelativeLocaleUrl("it", item.url)}
                    class={activeNav === item.name ? "active" : ""}
                    aria-label={`Naviga alla sezione ${item.name}`}
                  >
                    {t(item.name)}
                  </a>
                )}
              </li>
            ))
          }

          <!-- Locale toggler -->
          <li>
            <a
              href={Astro.currentLocale == "en"
                ? getRelativeLocaleUrl("it", Astro.url.pathname)
                : getRelativeLocaleUrl("en", Astro.url.pathname.slice(3))}
              aria-label="Switch language"
              class="focus-outline p-1"
            >
              <Icon
                class="text-skin-base duration-75 hover:text-skin-accent"
                name="lucide:languages"
              />
            </a>
          </li>

          <!-- Theme toggler -->
          <li>
            <button
              id="theme-button"
              class="focus-outline"
              title="Toggles light & dark modes"
              aria-label="auto"
              aria-live="polite"
            >
              <Icon
                id="sun-svg"
                class="text-skin-base duration-75 hover:text-skin-accent"
                name="lucide:sun"
              />
              <Icon
                id="moon-svg"
                class="text-skin-base duration-75 hover:text-skin-accent"
                name="lucide:moon"
              />
            </button>
          </li>
        </ul>
      </nav>
    </div>
  </div>
</header>

<style>
  #skip-to-content {
    @apply absolute -top-full left-4 z-50 bg-skin-accent px-3 py-2 text-skin-inverted transition-all focus:top-4;
  }
  .nav-container {
    @apply mx-auto flex max-w-screen-2xl flex-col items-center justify-between sm:flex-row;
  }
  .top-nav-wrap {
    @apply relative flex w-full items-start justify-center p-4 sm:items-center sm:py-8;
  }
  .logo {
    @apply absolute left-4 top-4 z-50 h-10 w-10 py-1 sm:static sm:h-12 sm:w-12;
  }
  .hamburger-menu {
    @apply self-end p-2 sm:hidden;
  }
  .hamburger-menu svg {
    @apply h-6 w-6 scale-125;
  }

  nav {
    @apply flex w-full flex-col items-center sm:ml-2 sm:flex-row sm:justify-end sm:space-x-4 sm:px-4;
  }
  nav ul {
    @apply mt-4 grid w-44 grid-cols-2 grid-rows-2 gap-x-2 gap-y-2 sm:ml-0 sm:mt-0 sm:w-auto sm:gap-x-5 sm:gap-y-0;
  }
  nav ul li {
    @apply col-span-2 flex items-center justify-center;
  }
  nav ul li a {
    @apply w-full px-4 py-3 text-center text-xl font-medium text-skin-base duration-75 hover:text-skin-accent sm:my-0 sm:px-2 sm:py-1;
  }
  nav ul li:nth-last-child(2) a {
    @apply w-auto;
  }
  nav ul li:nth-last-child(1),
  nav ul li:nth-last-child(2) {
    @apply col-span-1;
  }
  nav a.active {
    @apply underline decoration-2 underline-offset-4;
  }

  nav button {
    @apply p-1;
  }
  #theme-btn {
    @apply p-3 sm:p-1;
  }

  .menu-icon line,
  .menu-icon path {
    @apply transition-opacity duration-75 ease-in-out;
  }
  .menu-icon .close {
    opacity: 0;
  }
  .menu-icon.is-active .line {
    @apply opacity-0;
  }
  .menu-icon.is-active .close {
    @apply opacity-100;
  }
</style>

<script>
  function toggleNav() {
    // Toggle menu
    const menuBtn = document.querySelector(".hamburger-menu");
    const menuIcon = document.querySelector(".menu-icon");
    const menuItems = document.querySelector("#menu-items");

    menuBtn?.addEventListener("click", () => {
      const menuExpanded = menuBtn.getAttribute("aria-expanded") === "true";
      menuIcon?.classList.toggle("is-active");
      menuBtn.setAttribute("aria-expanded", menuExpanded ? "false" : "true");
      menuBtn.setAttribute(
        "aria-label",
        menuExpanded ? "Open Menu" : "Close Menu"
      );
      menuItems?.classList.toggle("hidden");
    });
  }

  toggleNav();

  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", toggleNav);
</script>
